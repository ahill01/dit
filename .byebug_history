c
rec_requests
c
rec_req.first
rec_req
rec_req = CollabRequest.where("reciever_id = ? and accepted = ?",params[:user_id],false)
c
self.object[0]
self[0]
self.record
self.reference
self.object
self
self.object
c
all_req
c
all_req
c
all_req
c
requests[0]
requests.object
requests.first
requests
c
requests
c
self.object
self.object.
self
self.object
c
user
c
user
c
session_params[:username]
session_params
user
c
primary.first != nil
primary.first == nil
primary == nil
primary -- nil
primary !== nil
primary != nil
primary.first == nil
primary.first
primary
c
primary = nil
primary == nil
primary == null
primary
primary == nil
primary.to_b
Boolean(primary)
boolean(primary)
primary
c
User.create!(new_user_params)
c
User.create!(new_user_params)
c
User.create!(new_user_params)
c
User.create!(new_user_params)
new_user_params
user_params
c
new_user_params
c
User.create!(user_params)
c
user_params[:password_digest]
user_params[:password]
cuser_params[:password]
user_params[:password]
user_params
c
user_params
c
user_params[:password_digest]
user_params[:password]
User.create!(user_params)
user_params[:username]User.create!(user_params)
user_params[:username]
user_params.username.present?
user_params
username.presence?
c
self.object.messages.last.user_id
self.object.messages.last
c
primary.first.kind
primary.first
primary.object
primary.instrument
primary
primary.self
primary.object
primary.object.kind
primary.kind
primary
c
self.object.instruments.where(primary:true).limit(1)
self.object.instruments.where(primary:true)
self.object.instruments
primary.kind
primary
primary[:kind]
primary.kind
primary
c
self.object.instruments.where(primary:true).limit(1)
self.object.instruments.where(primary:true)
self.object.instruments
self.object.primary_instrument
self.object.instruments.primary_instrument
self.object
c
self.object.messages.last.body
self.object.messages.last
self.object.messages
c
params
c
CollabRequest.find(params[:id])
c
self.object.requester_id
self.object
c
cc
c
reqests
requests
c
params.includes?(:user_id)
params.include?(:user_id)
c
requests
c
params.include?(:user_id)
c
quit
params.include?(:user_id)
c
CollabRequest.where("collaborator_a_id = ? OR collaborator_b_id = ?",params[:user_id],params[:user_id])
CollabRequest.where("collaborator_a_id = ? OR collaborator_b_id = ?",params[:user_id])
requests
reqests = CollabRequest.where("collaborator_a_id = ? OR collaborator_b = ?", params[:user_id])
params.include?(:user_id)
params.include?("user_id")
params[:user_id]
params
c
self.object.instruments.where(primary:true).limit(1)
self.object.instruments.where(primary:true)
self.object.primary_instrument
self.object.instruments
self.object
c
self.object.primary_instrument
c
primary.user_id
primary
primary.self
primary.object
primary
primary[:kind]
primary[kind]
primary
primary.kind
primary
c
self.object.instruments.where(primary:true).limit(1)
self.object.instruments.where(primary:true)
self.object.instruments
c
conversations
c
Conversation.first
conversations.first
conversations[0]
conversations
params["user_id"]
params
conversations
c
user = User.find(self.object.recipient_id).name
user = User.find(self.object.recipient_id)
self.object.recipient_id
c
conversations
user
c
user
c
User.find(1)
user
c
params
c
user
c
params[:credentials][:username]
params[:username]
session_params[:username]
session_params
c
user
c
user
c
user
c
params
user
